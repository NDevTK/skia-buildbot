// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "go.skia.org/infra/perf/go/anomalygroup/proto/v1"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, subscription_name, subscription_revision, domain_name, benchmark_name, start_commit, end_commit, action
func (_m *Store) Create(ctx context.Context, subscription_name string, subscription_revision string, domain_name string, benchmark_name string, start_commit int64, end_commit int64, action string) (string, error) {
	ret := _m.Called(ctx, subscription_name, subscription_revision, domain_name, benchmark_name, start_commit, end_commit, action)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, int64, int64, string) (string, error)); ok {
		return rf(ctx, subscription_name, subscription_revision, domain_name, benchmark_name, start_commit, end_commit, action)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, int64, int64, string) string); ok {
		r0 = rf(ctx, subscription_name, subscription_revision, domain_name, benchmark_name, start_commit, end_commit, action)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, int64, int64, string) error); ok {
		r1 = rf(ctx, subscription_name, subscription_revision, domain_name, benchmark_name, start_commit, end_commit, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadById provides a mock function with given fields: ctx, group_id
func (_m *Store) LoadById(ctx context.Context, group_id string) (*v1.AnomalyGroup, error) {
	ret := _m.Called(ctx, group_id)

	if len(ret) == 0 {
		panic("no return value specified for LoadById")
	}

	var r0 *v1.AnomalyGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.AnomalyGroup, error)); ok {
		return rf(ctx, group_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.AnomalyGroup); ok {
		r0 = rf(ctx, group_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AnomalyGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, group_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
